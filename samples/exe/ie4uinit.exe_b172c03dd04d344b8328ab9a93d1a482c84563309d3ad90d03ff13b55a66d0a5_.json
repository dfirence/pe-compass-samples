{
  "name": "ie4uinit.exe",
  "path": "\\\\?\\C:\\Windows\\System32\\ie4uinit.exe",
  "size": 254464,
  "is_64": true,
  "is_lib": false,
  "is_dotnet": false,
  "has_imports": true,
  "has_exports": false,
  "subsystem": 2,
  "subsystem_caption": "The Windows Graphical User Interface (GUI) Subsystem",
  "libs": [
    "advapi32.dll",
    "crypt32.dll",
    "ieadvpack.dll",
    "iedkcs32.dll",
    "iertutil.dll",
    "kernel32.dll",
    "kernelbase.dll",
    "mlang.dll",
    "msvcrt.dll",
    "netapi32.dll",
    "ntdll.dll",
    "ole32.dll",
    "oleaut32.dll",
    "shell32.dll",
    "shlwapi.dll",
    "urlmon.dll",
    "user32.dll",
    "version.dll",
    "wininet.dll"
  ],
  "imports": [
    {
      "lib": "version.dll",
      "count": 3,
      "functions": [
        "GetFileVersionInfoExW",
        "GetFileVersionInfoSizeExW",
        "VerQueryValueW"
      ]
    },
    {
      "lib": "crypt32.dll",
      "count": 19,
      "functions": [
        "CertAddCertificateContextToStore",
        "CertCloseStore",
        "CertCreateCertificateContext",
        "CertEnumCertificatesInStore",
        "CertFindCertificateInStore",
        "CertFreeCertificateChain",
        "CertFreeCertificateContext",
        "CertGetCertificateChain",
        "CertGetCertificateContextProperty",
        "CertGetEnhancedKeyUsage",
        "CertGetIntendedKeyUsage",
        "CertGetNameStringW",
        "CertOpenStore",
        "CertVerifyCertificateChainPolicy",
        "CryptBinaryToStringA",
        "CryptHashCertificate",
        "CryptImportPublicKeyInfo",
        "CryptStringToBinaryA",
        "CryptStringToBinaryW"
      ]
    },
    {
      "lib": "advapi32.dll",
      "count": 50,
      "functions": [
        "AddAccessAllowedAceEx",
        "CheckTokenMembership",
        "ConvertSidToStringSidW",
        "ConvertStringSecurityDescriptorToSecurityDescriptorW",
        "ConvertStringSidToSidW",
        "CopySid",
        "CryptAcquireContextW",
        "CryptCreateHash",
        "CryptDeriveKey",
        "CryptDestroyHash",
        "CryptDestroyKey",
        "CryptEncrypt",
        "CryptGenRandom",
        "CryptGetHashParam",
        "CryptGetKeyParam",
        "CryptHashData",
        "CryptReleaseContext",
        "CryptSetHashParam",
        "CryptSetKeyParam",
        "CryptVerifySignatureW",
        "EventRegister",
        "EventSetInformation",
        "EventUnregister",
        "EventWriteEx",
        "EventWriteTransfer",
        "FreeSid",
        "GetAce",
        "GetKernelObjectSecurity",
        "GetLengthSid",
        "GetNamedSecurityInfoW",
        "GetSecurityDescriptorSacl",
        "GetTokenInformation",
        "IsValidSid",
        "OpenProcessToken",
        "OpenThreadToken",
        "RegCloseKey",
        "RegCreateKeyExW",
        "RegCreateKeyW",
        "RegDeleteKeyW",
        "RegDeleteValueW",
        "RegEnumKeyExW",
        "RegEnumValueW",
        "RegGetValueW",
        "RegOpenKeyExW",
        "RegOpenKeyW",
        "RegQueryInfoKeyW",
        "RegQueryValueExW",
        "RegSetValueExW",
        "RegSetValueW",
        "SetNamedSecurityInfoW"
      ]
    },
    {
      "lib": "ole32.dll",
      "count": 10,
      "functions": [
        "CoCreateGuid",
        "CoCreateInstance",
        "CoInitializeEx",
        "CoTaskMemAlloc",
        "CoTaskMemFree",
        "CoUninitialize",
        "OleInitialize",
        "OleUninitialize",
        "PropVariantClear",
        "StringFromGUID2"
      ]
    },
    {
      "lib": "shell32.dll",
      "count": 14,
      "functions": [
        "CommandLineToArgvW",
        "ORDINAL 155",
        "ORDINAL 165",
        "ORDINAL 190",
        "ORDINAL 526",
        "SHChangeNotify",
        "SHCreateDirectoryExW",
        "SHCreateItemFromParsingName",
        "SHGetDesktopFolder",
        "SHGetFolderPathW",
        "SHGetKnownFolderPath",
        "SHGetSpecialFolderLocation",
        "SHGetSpecialFolderPathW",
        "SHSetLocalizedName"
      ]
    },
    {
      "lib": "wininet.dll",
      "count": 9,
      "functions": [
        "HttpOpenRequestW",
        "HttpQueryInfoW",
        "HttpSendRequestW",
        "InternetCanonicalizeUrlW",
        "InternetCloseHandle",
        "InternetConnectW",
        "InternetCrackUrlW",
        "InternetOpenW",
        "InternetReadFile"
      ]
    },
    {
      "lib": "ieadvpack.dll",
      "count": 1,
      "functions": [
        "ExecuteCabW"
      ]
    },
    {
      "lib": "kernel32.dll",
      "count": 125,
      "functions": [
        "AcquireSRWLockExclusive",
        "AcquireSRWLockShared",
        "CloseHandle",
        "CloseThreadpoolTimer",
        "CompareStringOrdinal",
        "CreateEventW",
        "CreateFile2",
        "CreateFileMappingW",
        "CreateFileW",
        "CreateMutexExW",
        "CreateMutexW",
        "CreateProcessW",
        "CreateSemaphoreExW",
        "CreateThread",
        "CreateThreadpoolTimer",
        "DebugBreak",
        "DelayLoadFailureHook",
        "DeleteCriticalSection",
        "DeleteFileW",
        "DuplicateHandle",
        "EnterCriticalSection",
        "ExpandEnvironmentStringsW",
        "FindClose",
        "FindFirstFileExW",
        "FindFirstFileW",
        "FindNextFileW",
        "FindResourceW",
        "FlushFileBuffers",
        "FlushViewOfFile",
        "FormatMessageW",
        "FreeLibrary",
        "GetCurrentDirectoryW",
        "GetCurrentProcess",
        "GetCurrentProcessId",
        "GetCurrentThread",
        "GetCurrentThreadId",
        "GetEnvironmentVariableW",
        "GetExitCodeProcess",
        "GetFileAttributesW",
        "GetFileSizeEx",
        "GetFullPathNameW",
        "GetLastError",
        "GetLocalTime",
        "GetModuleFileNameA",
        "GetModuleFileNameW",
        "GetModuleHandleExW",
        "GetModuleHandleW",
        "GetNativeSystemInfo",
        "GetProcAddress",
        "GetProcessHeap",
        "GetProductInfo",
        "GetShortPathNameW",
        "GetStartupInfoW",
        "GetStdHandle",
        "GetSystemDirectoryW",
        "GetSystemInfo",
        "GetSystemTime",
        "GetSystemTimeAsFileTime",
        "GetTempFileNameW",
        "GetTempPathW",
        "GetTickCount",
        "GetUserPreferredUILanguages",
        "GetVersionExA",
        "GetVersionExW",
        "HeapAlloc",
        "HeapFree",
        "HeapSetInformation",
        "InitOnceExecuteOnce",
        "InitializeCriticalSection",
        "InitializeCriticalSectionEx",
        "IsDebuggerPresent",
        "IsWow64Process",
        "LCMapStringW",
        "LeaveCriticalSection",
        "LoadLibraryExW",
        "LoadLibraryW",
        "LoadResource",
        "LocalFree",
        "LocaleNameToLCID",
        "LockResource",
        "MapViewOfFile",
        "MultiByteToWideChar",
        "OpenFileMappingW",
        "OpenMutexW",
        "OpenSemaphoreW",
        "OutputDebugStringW",
        "QueryPerformanceCounter",
        "QueryPerformanceFrequency",
        "QueueUserWorkItem",
        "RaiseException",
        "RaiseFailFastException",
        "ReadFile",
        "ReleaseMutex",
        "ReleaseSRWLockExclusive",
        "ReleaseSRWLockShared",
        "ReleaseSemaphore",
        "RemoveDirectoryW",
        "ResolveDelayLoadedAPI",
        "SetCurrentDirectoryW",
        "SetEndOfFile",
        "SetErrorMode",
        "SetEvent",
        "SetFileAttributesW",
        "SetFilePointer",
        "SetFileTime",
        "SetLastError",
        "SetPriorityClass",
        "SetThreadpoolTimer",
        "SetUnhandledExceptionFilter",
        "SizeofResource",
        "Sleep",
        "SleepConditionVariableSRW",
        "SystemTimeToFileTime",
        "TerminateProcess",
        "UnhandledExceptionFilter",
        "UnmapViewOfFile",
        "VerSetConditionMask",
        "VerifyVersionInfoW",
        "WaitForSingleObject",
        "WaitForSingleObjectEx",
        "WaitForThreadpoolTimerCallbacks",
        "WakeAllConditionVariable",
        "WideCharToMultiByte",
        "WriteFile",
        "lstrcmpW"
      ]
    },
    {
      "lib": "urlmon.dll",
      "count": 3,
      "functions": [
        "CreateIUriBuilder",
        "CreateUri",
        "ORDINAL 410"
      ]
    },
    {
      "lib": "user32.dll",
      "count": 7,
      "functions": [
        "CharNextW",
        "GetMessageW",
        "GetShellWindow",
        "LoadStringW",
        "PostMessageW",
        "PostThreadMessageW",
        "SendMessageTimeoutW"
      ]
    },
    {
      "lib": "mlang.dll",
      "count": 1,
      "functions": [
        "ORDINAL 123"
      ]
    },
    {
      "lib": "iertutil.dll",
      "count": 44,
      "functions": [
        "ORDINAL 134",
        "ORDINAL 139",
        "ORDINAL 149",
        "ORDINAL 281",
        "ORDINAL 282",
        "ORDINAL 33",
        "ORDINAL 37",
        "ORDINAL 38",
        "ORDINAL 398",
        "ORDINAL 50",
        "ORDINAL 57",
        "ORDINAL 594",
        "ORDINAL 597",
        "ORDINAL 650",
        "ORDINAL 651",
        "ORDINAL 652",
        "ORDINAL 653",
        "ORDINAL 654",
        "ORDINAL 655",
        "ORDINAL 656",
        "ORDINAL 657",
        "ORDINAL 660",
        "ORDINAL 662",
        "ORDINAL 665",
        "ORDINAL 672",
        "ORDINAL 675",
        "ORDINAL 677",
        "ORDINAL 678",
        "ORDINAL 682",
        "ORDINAL 690",
        "ORDINAL 701",
        "ORDINAL 74",
        "ORDINAL 76",
        "ORDINAL 78",
        "ORDINAL 79",
        "ORDINAL 791",
        "ORDINAL 793",
        "ORDINAL 796",
        "ORDINAL 81",
        "ORDINAL 820",
        "ORDINAL 85",
        "ORDINAL 90",
        "ORDINAL 91",
        "ORDINAL 99"
      ]
    },
    {
      "lib": "netapi32.dll",
      "count": 2,
      "functions": [
        "NetApiBufferFree",
        "NetGetJoinInformation"
      ]
    },
    {
      "lib": "shlwapi.dll",
      "count": 35,
      "functions": [
        "ORDINAL 158",
        "ORDINAL 2",
        "ORDINAL 219",
        "ORDINAL 388",
        "ORDINAL 433",
        "ORDINAL 487",
        "PathFileExistsW",
        "PathFindFileNameW",
        "PathIsNetworkPathW",
        "PathIsURLW",
        "PathRemoveBlanksW",
        "PathRemoveExtensionW",
        "SHCopyKeyW",
        "SHDeleteKeyW",
        "SHDeleteValueW",
        "SHGetValueW",
        "SHRegDeleteUSValueW",
        "SHRegGetUSValueW",
        "SHRegSetUSValueW",
        "SHSetValueW",
        "SHStrDupW",
        "StrCmpIW",
        "StrCmpNA",
        "StrCmpNIA",
        "StrCmpNIW",
        "StrCmpNW",
        "StrCmpW",
        "StrStrIW",
        "StrStrW",
        "StrTrimW",
        "UrlApplySchemeW",
        "UrlCanonicalizeW",
        "UrlCreateFromPathW",
        "UrlEscapeW",
        "UrlUnescapeW"
      ]
    },
    {
      "lib": "ntdll.dll",
      "count": 5,
      "functions": [
        "NtClose",
        "NtQueryLicenseValue",
        "RtlCaptureContext",
        "RtlLookupFunctionEntry",
        "RtlVirtualUnwind"
      ]
    },
    {
      "lib": "iedkcs32.dll",
      "count": 1,
      "functions": [
        "BrandIEActiveSetup"
      ]
    },
    {
      "lib": "oleaut32.dll",
      "count": 11,
      "functions": [
        "ORDINAL 10",
        "ORDINAL 149",
        "ORDINAL 150",
        "ORDINAL 2",
        "ORDINAL 313",
        "ORDINAL 314",
        "ORDINAL 4",
        "ORDINAL 6",
        "ORDINAL 7",
        "ORDINAL 8",
        "ORDINAL 9"
      ]
    },
    {
      "lib": "kernelbase.dll",
      "count": 4,
      "functions": [
        "GetSystemDefaultLocaleName",
        "GetUserDefaultLocaleName",
        "LocalAlloc",
        "OpenGlobalizationUserSettingsKey"
      ]
    },
    {
      "lib": "msvcrt.dll",
      "count": 47,
      "functions": [
        "??1type_info@@UEAA@XZ",
        "?terminate@@YAXXZ",
        "_CxxThrowException",
        "_XcptFilter",
        "__C_specific_handler",
        "__dllonexit",
        "__set_app_type",
        "__setusermatherr",
        "__wgetmainargs",
        "_amsg_exit",
        "_cexit",
        "_commode",
        "_exit",
        "_fmode",
        "_initterm",
        "_lock",
        "_onexit",
        "_time64",
        "_ultow_s",
        "_unlock",
        "_vsnwprintf",
        "_vsnwprintf_s",
        "_wcmdln",
        "_wcsicmp",
        "_wcsnicmp",
        "_wfopen_s",
        "_wtoi",
        "exit",
        "fclose",
        "fgetws",
        "isalnum",
        "iswalpha",
        "memcmp",
        "memcpy_s",
        "memmove_s",
        "memset",
        "rand_s",
        "sprintf_s",
        "strnlen",
        "swscanf_s",
        "wcscat_s",
        "wcschr",
        "wcscpy_s",
        "wcsncmp",
        "wcsncpy_s",
        "wcsnlen",
        "wcsrchr"
      ]
    }
  ],
  "hashes": {
    "sha2": "b172c03dd04d344b8328ab9a93d1a482c84563309d3ad90d03ff13b55a66d0a5",
    "ssdeep": "6144:8e2bn4HxOfUuNolBNddDy7Fi6Iile0WTz:8eoneWsWRixZ"
  },
  "intent": {
    "intentions": 14,
    "uniq_apis_matched": 40,
    "results": [
      {
        "intent": "Enumerates Files or Directories on the Target System",
        "tag": "Discovery:T1083 - File and Directory Discovery",
        "component": "Filesystem",
        "inputs": 5,
        "matches": 2,
        "apis": [
          "FindFirstFileExW",
          "FindFirstFileW"
        ]
      },
      {
        "intent": "Can Enumerate The Windows Registry",
        "tag": "Expert Input:IBO.0009 - Enumerate The Windows Registry",
        "component": "Registry",
        "inputs": 6,
        "matches": 2,
        "apis": [
          "RegEnumKeyExW",
          "RegEnumValueW"
        ]
      },
      {
        "intent": "Can Manipulate Access Control Mechanisms",
        "tag": "Expert Input:IBO.00021 - Windows Access Control Lists",
        "component": "Privileges",
        "inputs": 15,
        "matches": 1,
        "apis": [
          "AddAccessAllowedAceEx"
        ]
      },
      {
        "intent": "Can Be Invoked With CommandLine Arguments From a Console/Terminal",
        "tag": "Expert Input:IBO.0001 - Accepts CommandLine Arguments",
        "component": "Processes",
        "inputs": 3,
        "matches": 2,
        "apis": [
          "CommandLineToArgvW",
          "__wgetmainargs"
        ]
      },
      {
        "intent": "Queries and Discovers General Attributes From The Target System",
        "tag": "Discovery:T1082 - System Information Discovery",
        "component": "---",
        "inputs": 3,
        "matches": 1,
        "apis": [
          "GetNativeSystemInfo"
        ]
      },
      {
        "intent": "Can Create/Manipulate The Windows Registry",
        "tag": "Expert Input:IBO.0008 - Create/Manipulate The Windows Registry",
        "component": "Registry",
        "inputs": 33,
        "matches": 8,
        "apis": [
          "RegCreateKeyExW",
          "RegCreateKeyW",
          "RegDeleteKeyW",
          "RegDeleteValueW",
          "RegOpenKeyExW",
          "RegOpenKeyW",
          "RegSetValueExW",
          "RegSetValueW"
        ]
      },
      {
        "intent": "Deletes Files From Disk Potentially Erasing Important Evidence To Cover Attack Activity",
        "tag": "Defense Evasion:T1070.004 - File Deletion",
        "component": "Filesystem",
        "inputs": 2,
        "matches": 1,
        "apis": [
          "DeleteFileW"
        ]
      },
      {
        "intent": "Can Terminate Processes On The Target System",
        "tag": "Expert Input:IBO.0025",
        "component": "---",
        "inputs": 1,
        "matches": 1,
        "apis": [
          "TerminateProcess"
        ]
      },
      {
        "intent": "Can Conduct Cryptographic Operations",
        "tag": "Expert Input:IBO.00022 - Windows Cryptography Facilities",
        "component": "Crypto",
        "inputs": 67,
        "matches": 9,
        "apis": [
          "CryptAcquireContextW",
          "CryptCreateHash",
          "CryptDestroyHash",
          "CryptDestroyKey",
          "CryptEncrypt",
          "CryptGenRandom",
          "CryptGetHashParam",
          "CryptHashData",
          "CryptReleaseContext"
        ]
      },
      {
        "intent": "Can Delay Loading of DLLs Until Runtime/Process Execution",
        "tag": "Expert Input:IBO.0005 - Load DLL Resources With Delay During Runtime",
        "component": "Memory",
        "inputs": 2,
        "matches": 2,
        "apis": [
          "DelayLoadFailureHook",
          "ResolveDelayLoadedAPI"
        ]
      },
      {
        "intent": "Can Execute or Spawn New Processes On The Target System",
        "tag": "Expert Input:IBO.0002 - Spawn New Process",
        "component": "Processes",
        "inputs": 7,
        "matches": 1,
        "apis": [
          "CreateProcessW"
        ]
      },
      {
        "intent": "Queries And Discovers Windows Registry Configuration Settings",
        "tag": "Discovery:T1012 - Query Registry",
        "component": "Registry",
        "inputs": 11,
        "matches": 3,
        "apis": [
          "RegGetValueW",
          "RegQueryInfoKeyW",
          "RegQueryValueExW"
        ]
      },
      {
        "intent": "Connects Over HTTP, HTTPS To Download Content On The Target System",
        "tag": "Command And Control:T1105 - Ingress Tool Transfer",
        "component": "Networking",
        "inputs": 21,
        "matches": 4,
        "apis": [
          "HttpOpenRequestW",
          "HttpSendRequestW",
          "InternetConnectW",
          "InternetCrackUrlW"
        ]
      },
      {
        "intent": "Can Access And Read Windows Tokens",
        "tag": "Expert Input:IBO.00020 - Windows Token Access",
        "component": "Privileges",
        "inputs": 4,
        "matches": 3,
        "apis": [
          "CheckTokenMembership",
          "OpenProcessToken",
          "OpenThreadToken"
        ]
      }
    ]
  }
}