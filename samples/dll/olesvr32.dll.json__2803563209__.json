{
  "pe_name": "olesvr32.dll",
  "pe_type": 267,
  "pe_size": 58368,
  "pe_subsystem": 3,
  "pe_subsystem_caption": "The Windows character (Cosole UI) subsystem",
  "pe_path": "c:\\Windows\\WinSxS\\x86_microsoft-windows-com-legacyole_31bf3856ad364e35_10.0.19041.1_none_98ee1707b9464d78\\olesvr32.dll",
  "pe_timedate_stamp": 3168820767,
  "pe_timedate_human": "2070-06-01T03:59:27.000Z",
  "ImageDLLImports": [
    {
      "name": "msvcrt.dll",
      "imports": 20,
      "functions": [
        "??3@YAXPAX@Z",
        "_XcptFilter",
        "__dllonexit",
        "_amsg_exit",
        "_errno",
        "_except_handler4_common",
        "_initterm",
        "_lock",
        "_onexit",
        "_purecall",
        "_resetstkoflw",
        "_unlock",
        "_vsnwprintf",
        "free",
        "malloc",
        "memcmp",
        "memcpy",
        "memmove",
        "memset",
        "wcsncmp"
      ]
    },
    {
      "name": "kernel32.dll",
      "imports": 68,
      "functions": [
        "AcquireSRWLockExclusive",
        "AcquireSRWLockShared",
        "CloseHandle",
        "CloseThreadpoolTimer",
        "CreateMutexExW",
        "CreateSemaphoreExW",
        "CreateThreadpoolTimer",
        "DebugBreak",
        "DeleteCriticalSection",
        "EnterCriticalSection",
        "FormatMessageW",
        "GetCurrentProcess",
        "GetCurrentProcessId",
        "GetCurrentThread",
        "GetCurrentThreadId",
        "GetLastError",
        "GetModuleFileNameA",
        "GetModuleHandleExW",
        "GetModuleHandleW",
        "GetProcAddress",
        "GetProcessHeap",
        "GetSystemInfo",
        "GetSystemTimeAsFileTime",
        "GetTickCount",
        "GlobalAddAtomA",
        "GlobalAlloc",
        "GlobalDeleteAtom",
        "GlobalFindAtomA",
        "GlobalFree",
        "GlobalGetAtomNameA",
        "GlobalLock",
        "GlobalSize",
        "GlobalUnlock",
        "HeapAlloc",
        "HeapFree",
        "InitOnceBeginInitialize",
        "InitOnceComplete",
        "InitializeCriticalSectionEx",
        "IsDebuggerPresent",
        "IsWow64Process",
        "LeaveCriticalSection",
        "LocalAlloc",
        "LocalFree",
        "LocalLock",
        "LocalUnlock",
        "OpenSemaphoreW",
        "OutputDebugStringA",
        "OutputDebugStringW",
        "QueryPerformanceCounter",
        "ReleaseMutex",
        "ReleaseSRWLockExclusive",
        "ReleaseSRWLockShared",
        "ReleaseSemaphore",
        "SetLastError",
        "SetThreadStackGuarantee",
        "SetThreadpoolTimer",
        "SetUnhandledExceptionFilter",
        "Sleep",
        "TerminateProcess",
        "UnhandledExceptionFilter",
        "VirtualAlloc",
        "VirtualProtect",
        "VirtualQuery",
        "WaitForSingleObject",
        "WaitForSingleObjectEx",
        "WaitForThreadpoolTimerCallbacks",
        "lstrcmpA",
        "lstrcmpiA"
      ]
    },
    {
      "name": "advapi32.dll",
      "imports": 11,
      "functions": [
        "EventRegister",
        "EventSetInformation",
        "EventUnregister",
        "EventWriteTransfer",
        "OpenProcessToken",
        "OpenThreadToken",
        "RegCloseKey",
        "RegOpenKeyExA",
        "RegOpenUserClassesRoot",
        "RegQueryValueExA",
        "SetThreadToken"
      ]
    },
    {
      "name": "user32.dll",
      "imports": 26,
      "functions": [
        "CreateWindowExA",
        "DefWindowProcA",
        "DestroyWindow",
        "EnumChildWindows",
        "EnumPropsA",
        "FreeDDElParam",
        "GetClassNameA",
        "GetDesktopWindow",
        "GetParent",
        "GetPropA",
        "GetWindow",
        "GetWindowLongA",
        "GetWindowThreadProcessId",
        "IsWindow",
        "KillTimer",
        "PackDDElParam",
        "PostMessageA",
        "RegisterClassA",
        "RegisterClipboardFormatA",
        "RemovePropA",
        "SendMessageA",
        "SetPropA",
        "SetTimer",
        "SetWindowLongA",
        "SetWindowWord",
        "UnpackDDElParam"
      ]
    },
    {
      "name": "gdi32.dll",
      "imports": 9,
      "functions": [
        "CopyEnhMetaFileA",
        "CopyMetaFileA",
        "CreateBitmap",
        "DeleteEnhMetaFile",
        "DeleteMetaFile",
        "DeleteObject",
        "GetBitmapBits",
        "GetObjectA",
        "SetBitmapBits"
      ]
    },
    {
      "name": "ntdll.dll",
      "imports": 2,
      "functions": [
        "EtwEventWriteTransfer",
        "EtwTraceMessage"
      ]
    }
  ],
  "ImageDLLExports": {
    "exports": 23,
    "functions": [
      "DeleteClientInfo",
      "DocWndProc",
      "EnumForTerminate",
      "FindItemWnd",
      "ItemCallBack",
      "ItemWndProc",
      "OleBlockServer",
      "OleQueryServerVersion",
      "OleRegisterServer",
      "OleRegisterServerDoc",
      "OleRenameServerDoc",
      "OleRevertServerDoc",
      "OleRevokeObject",
      "OleRevokeServer",
      "OleRevokeServerDoc",
      "OleSavedServerDoc",
      "OleUnblockServer",
      "SendDataMsg",
      "SendRenameMsg",
      "SrvrWndProc",
      "TerminateClients",
      "TerminateDocClients",
      "WEP"
    ]
  },
  "ImageHashSignatures": {
    "sha2": "764e65e4d575f90da476203f5ab373bf93f79b9574e568a815ccbc571565b7bf"
  },
  "scan": {
    "intentions": 5,
    "uniq_apis_matched": 6,
    "results": [
      {
        "intent": "Create Token To Impersonate",
        "tag": "Privilege Escalation:T1134.003 - Make and Impersonate Token",
        "component": "Privileges",
        "inputs": 2,
        "matches": 1,
        "apis": [
          "SetThreadToken"
        ]
      },
      {
        "intent": "Inject DLLs into Processes to evade defenses",
        "tag": "Defense Evasion:T1055 - Dynamic-Link Library Injection",
        "component": "Processes",
        "inputs": 4,
        "matches": 1,
        "apis": [
          "VirtualAlloc"
        ]
      },
      {
        "intent": "Manipulate Windows Tokens",
        "tag": "Defense Evasion:T1134 - Access Token Manipulation",
        "component": "Privileges",
        "inputs": 10,
        "matches": 2,
        "apis": [
          "OpenProcessToken",
          "OpenThreadToken"
        ]
      },
      {
        "intent": "Implements Features To Create/Manipulate The Windows Registry",
        "tag": "Expert Input:IBO.0008 - Create/Manipulate The Windows Registry",
        "component": "Registry",
        "inputs": 33,
        "matches": 1,
        "apis": [
          "RegOpenKeyExA"
        ]
      },
      {
        "intent": "Query And Discover Windows Registry Configuration Settings",
        "tag": "Discovery:T1012 - Query Registry",
        "component": "Registry",
        "inputs": 11,
        "matches": 1,
        "apis": [
          "RegQueryValueExA"
        ]
      }
    ]
  }
}