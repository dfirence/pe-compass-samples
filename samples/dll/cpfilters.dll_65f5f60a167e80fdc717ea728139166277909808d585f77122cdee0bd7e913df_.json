{
  "name": "cpfilters.dll",
  "path": "\\\\?\\C:\\Windows\\SysWOW64\\CPFilters.dll",
  "size": 408576,
  "is_64": false,
  "is_lib": true,
  "is_dotnet": true,
  "has_imports": true,
  "has_exports": true,
  "subsystem": 2,
  "subsystem_caption": "The Windows Graphical User Interface (GUI) Subsystem",
  "libs": [
    "advapi32.dll",
    "crypt32.dll",
    "kernel32.dll",
    "mfplat.dll",
    "msvcrt.dll",
    "ntdll.dll",
    "ole32.dll",
    "oleaut32.dll",
    "slc.dll",
    "winmm.dll",
    "wintrust.dll",
    "ws2_32.dll"
  ],
  "imports": [
    {
      "lib": "msvcrt.dll",
      "count": 58,
      "functions": [
        "??0exception@@QAE@ABQBD@Z",
        "??0exception@@QAE@ABV0@@Z",
        "??0exception@@QAE@XZ",
        "??1exception@@UAE@XZ",
        "??1type_info@@UAE@XZ",
        "?terminate@@YAXXZ",
        "?what@exception@@UBEPBDXZ",
        "_CxxThrowException",
        "_XcptFilter",
        "__CxxFrameHandler3",
        "__dllonexit",
        "_amsg_exit",
        "_beginthreadex",
        "_callnewh",
        "_endthread",
        "_except_handler4_common",
        "_ftol2",
        "_ftol2_sse",
        "_initterm",
        "_lock",
        "_onexit",
        "_purecall",
        "_time32",
        "_unlock",
        "_vsnwprintf",
        "_vsnwprintf_s",
        "_wcsicmp",
        "_wcsnicmp",
        "_wtol",
        "free",
        "isupper",
        "iswxdigit",
        "malloc",
        "memcmp",
        "memcpy",
        "memcpy_s",
        "memmove",
        "memmove_s",
        "memset",
        "rand",
        "realloc",
        "srand",
        "strcat_s",
        "strncpy_s",
        "strnlen",
        "swprintf_s",
        "swscanf",
        "swscanf_s",
        "time",
        "tolower",
        "wcscat_s",
        "wcschr",
        "wcsncmp",
        "wcsncpy_s",
        "wcsnlen",
        "wcspbrk",
        "wcsstr",
        "wcstoul"
      ]
    },
    {
      "lib": "slc.dll",
      "count": 1,
      "functions": [
        "SLGetWindowsInformationDWORD"
      ]
    },
    {
      "lib": "crypt32.dll",
      "count": 4,
      "functions": [
        "CertFreeCertificateChain",
        "CertGetCertificateChain",
        "CertGetNameStringW",
        "CertVerifyCertificateChainPolicy"
      ]
    },
    {
      "lib": "ole32.dll",
      "count": 12,
      "functions": [
        "CLSIDFromString",
        "CoCreateGuid",
        "CoCreateInstance",
        "CoFileTimeNow",
        "CoFreeUnusedLibraries",
        "CoInitializeEx",
        "CoTaskMemAlloc",
        "CoTaskMemFree",
        "CoUninitialize",
        "PropVariantClear",
        "PropVariantCopy",
        "StringFromGUID2"
      ]
    },
    {
      "lib": "kernel32.dll",
      "count": 82,
      "functions": [
        "AcquireSRWLockExclusive",
        "CloseHandle",
        "CompareFileTime",
        "CompareStringW",
        "CreateEventW",
        "CreateFileW",
        "CreateThread",
        "DebugBreak",
        "DecodeSystemPointer",
        "DeleteCriticalSection",
        "DeviceIoControl",
        "DisableThreadLibraryCalls",
        "EncodeSystemPointer",
        "EnterCriticalSection",
        "ExpandEnvironmentStringsW",
        "FreeEnvironmentStringsA",
        "FreeEnvironmentStringsW",
        "FreeLibrary",
        "GetCurrentProcess",
        "GetCurrentProcessId",
        "GetCurrentThread",
        "GetCurrentThreadId",
        "GetDiskFreeSpaceW",
        "GetEnvironmentStringsW",
        "GetFileSize",
        "GetGeoInfoA",
        "GetLastError",
        "GetLocalTime",
        "GetModuleFileNameA",
        "GetModuleFileNameW",
        "GetModuleHandleA",
        "GetModuleHandleExW",
        "GetModuleHandleW",
        "GetProcAddress",
        "GetProcessHeap",
        "GetSystemFirmwareTable",
        "GetSystemTimeAsFileTime",
        "GetTickCount",
        "GetTickCount64",
        "GetVersionExW",
        "GlobalAlloc",
        "GlobalFree",
        "GlobalLock",
        "GlobalMemoryStatusEx",
        "GlobalUnlock",
        "HeapAlloc",
        "HeapFree",
        "InitializeCriticalSection",
        "LeaveCriticalSection",
        "LoadLibraryExW",
        "LoadLibraryW",
        "LocalAlloc",
        "LocalFree",
        "MultiByteToWideChar",
        "OutputDebugStringA",
        "OutputDebugStringW",
        "QueryPerformanceCounter",
        "RaiseException",
        "RaiseFailFastException",
        "ReadFile",
        "ReleaseSRWLockExclusive",
        "ResetEvent",
        "ResumeThread",
        "SetEvent",
        "SetFilePointer",
        "SetThreadPriority",
        "SetUnhandledExceptionFilter",
        "Sleep",
        "SleepConditionVariableSRW",
        "SystemTimeToFileTime",
        "TerminateProcess",
        "UnhandledExceptionFilter",
        "VirtualProtect",
        "WaitForMultipleObjects",
        "WaitForSingleObject",
        "WakeAllConditionVariable",
        "WideCharToMultiByte",
        "WriteFile",
        "lstrcmpW",
        "lstrcmpiW",
        "lstrlenA",
        "lstrlenW"
      ]
    },
    {
      "lib": "winmm.dll",
      "count": 1,
      "functions": [
        "timeGetTime"
      ]
    },
    {
      "lib": "oleaut32.dll",
      "count": 15,
      "functions": [
        "ORDINAL 10",
        "ORDINAL 12",
        "ORDINAL 149",
        "ORDINAL 15",
        "ORDINAL 16",
        "ORDINAL 19",
        "ORDINAL 2",
        "ORDINAL 20",
        "ORDINAL 23",
        "ORDINAL 24",
        "ORDINAL 4",
        "ORDINAL 6",
        "ORDINAL 7",
        "ORDINAL 8",
        "ORDINAL 9"
      ]
    },
    {
      "lib": "wintrust.dll",
      "count": 3,
      "functions": [
        "CryptCATCatalogInfoFromContext",
        "WTHelperProvDataFromStateData",
        "WinVerifyTrust"
      ]
    },
    {
      "lib": "mfplat.dll",
      "count": 1,
      "functions": [
        "MFCreateCollection"
      ]
    },
    {
      "lib": "ws2_32.dll",
      "count": 1,
      "functions": [
        "ORDINAL 8"
      ]
    },
    {
      "lib": "advapi32.dll",
      "count": 13,
      "functions": [
        "CryptAcquireContextW",
        "CryptCreateHash",
        "CryptDestroyHash",
        "CryptGetHashParam",
        "CryptHashData",
        "CryptReleaseContext",
        "RegCloseKey",
        "RegCreateKeyExW",
        "RegDeleteKeyW",
        "RegEnumKeyExW",
        "RegOpenKeyExW",
        "RegQueryValueExW",
        "RegSetValueExW"
      ]
    },
    {
      "lib": "ntdll.dll",
      "count": 1,
      "functions": [
        "RtlGetPersistedStateLocation"
      ]
    }
  ],
  "exports": {
    "count": 5,
    "functions": [
      "DllCanUnloadNow",
      "DllGetClassObject",
      "DllRegisterServer",
      "DllUnregisterServer",
      "UpdatePlayready"
    ]
  },
  "hashes": {
    "sha2": "65f5f60a167e80fdc717ea728139166277909808d585f77122cdee0bd7e913df",
    "ssdeep": "6144:NBKquh8Dee6sdzWPqUmThfhO2rUC3NvPJRYW2dN4xtJ2VUDBoyKBH+PJnCxjnx1:H/uh8z6MWPqV1h3dZeN4xt0UD1rVEN"
  },
  "intent": {
    "intentions": 4,
    "uniq_apis_matched": 8,
    "results": [
      {
        "intent": "Can Create/Manipulate The Windows Registry",
        "tag": "Expert Input:IBO.0008 - Create/Manipulate The Windows Registry",
        "component": "Registry",
        "inputs": 33,
        "matches": 4,
        "apis": [
          "RegCreateKeyExW",
          "RegDeleteKeyW",
          "RegOpenKeyExW",
          "RegSetValueExW"
        ]
      },
      {
        "intent": "Can Enumerate The Windows Registry",
        "tag": "Expert Input:IBO.0009 - Enumerate The Windows Registry",
        "component": "Registry",
        "inputs": 6,
        "matches": 1,
        "apis": [
          "RegEnumKeyExW"
        ]
      },
      {
        "intent": "Queries And Discovers Windows Registry Configuration Settings",
        "tag": "Discovery:T1012 - Query Registry",
        "component": "Registry",
        "inputs": 11,
        "matches": 1,
        "apis": [
          "RegQueryValueExW"
        ]
      },
      {
        "intent": "Can Initiate Crypto Operations",
        "tag": "Expert Input:IBO.00022 - Cryptography",
        "component": "Crypto",
        "inputs": 12,
        "matches": 2,
        "apis": [
          "CryptAcquireContextW",
          "CryptReleaseContext"
        ]
      }
    ]
  }
}