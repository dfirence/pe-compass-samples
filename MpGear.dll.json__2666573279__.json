{
  "pe_name": "MpGear.dll",
  "pe_type": 523,
  "pe_size": 621624,
  "pe_subsystem": 3,
  "pe_subsystem_caption": "The Windows character (Cosole UI) subsystem",
  "pe_path": "c:\\Windows\\WinSxS\\amd64_windows-senseclient-service_31bf3856ad364e35_10.0.19041.1645_none_1cbd671744884514\\MpGear.dll",
  "pe_timedate_stamp": 2710678547,
  "pe_timedate_human": "2055-11-24T14:15:47.000Z",
  "ImageDLLImports": [
    {
      "name": "ntdll.dll",
      "imports": 7,
      "functions": [
        "RtlCaptureContext",
        "RtlGetVersion",
        "RtlLookupFunctionEntry",
        "RtlNtStatusToDosError",
        "RtlPcToFileHeader",
        "RtlUnwindEx",
        "RtlVirtualUnwind"
      ]
    },
    {
      "name": "kernel32.dll",
      "imports": 117,
      "functions": [
        "CloseHandle",
        "CloseThreadpool",
        "CloseThreadpoolWork",
        "CompareStringW",
        "CopyFileW",
        "CreateDirectoryW",
        "CreateEventW",
        "CreateFileW",
        "CreateProcessW",
        "CreateThreadpool",
        "CreateThreadpoolWork",
        "DecodePointer",
        "DeleteCriticalSection",
        "DeleteFileW",
        "EncodePointer",
        "EnterCriticalSection",
        "ExitProcess",
        "ExpandEnvironmentStringsW",
        "FileTimeToSystemTime",
        "FindClose",
        "FindFirstFileExW",
        "FindFirstFileW",
        "FindNextFileW",
        "FlushFileBuffers",
        "FreeEnvironmentStringsW",
        "FreeLibrary",
        "GetACP",
        "GetCPInfo",
        "GetCommandLineA",
        "GetCommandLineW",
        "GetComputerNameExW",
        "GetConsoleCP",
        "GetConsoleMode",
        "GetCurrentProcess",
        "GetCurrentProcessId",
        "GetCurrentThreadId",
        "GetDateFormatW",
        "GetEnvironmentStringsW",
        "GetEnvironmentVariableW",
        "GetExitCodeProcess",
        "GetFileAttributesExW",
        "GetFileAttributesW",
        "GetFileSizeEx",
        "GetFileType",
        "GetFullPathNameW",
        "GetLastError",
        "GetModuleFileNameW",
        "GetModuleHandleExW",
        "GetModuleHandleW",
        "GetOEMCP",
        "GetProcAddress",
        "GetProcessHeap",
        "GetStartupInfoW",
        "GetStdHandle",
        "GetStringTypeW",
        "GetSystemDirectoryW",
        "GetSystemPowerStatus",
        "GetSystemTime",
        "GetSystemTimeAsFileTime",
        "GetTempPathW",
        "GetTickCount",
        "GetTimeFormatW",
        "GetTimeZoneInformation",
        "GlobalFree",
        "HeapAlloc",
        "HeapFree",
        "HeapReAlloc",
        "HeapSize",
        "InitializeCriticalSection",
        "InitializeCriticalSectionAndSpinCount",
        "InitializeSListHead",
        "InterlockedFlushSList",
        "IsDebuggerPresent",
        "IsProcessorFeaturePresent",
        "IsValidCodePage",
        "LCMapStringW",
        "LeaveCriticalSection",
        "LoadLibraryExW",
        "LoadLibraryW",
        "MultiByteToWideChar",
        "QueryPerformanceCounter",
        "QueryPerformanceFrequency",
        "RaiseException",
        "ReadConsoleW",
        "ReadFile",
        "RemoveDirectoryW",
        "ResetEvent",
        "SetEndOfFile",
        "SetEnvironmentVariableW",
        "SetEvent",
        "SetFileAttributesW",
        "SetFilePointerEx",
        "SetLastError",
        "SetStdHandle",
        "SetThreadpoolThreadMaximum",
        "SetThreadpoolThreadMinimum",
        "SetUnhandledExceptionFilter",
        "Sleep",
        "SubmitThreadpoolWork",
        "SwitchToThread",
        "SystemTimeToFileTime",
        "TerminateProcess",
        "TlsAlloc",
        "TlsFree",
        "TlsGetValue",
        "TlsSetValue",
        "TryEnterCriticalSection",
        "UnhandledExceptionFilter",
        "VirtualLock",
        "WaitForMultipleObjects",
        "WaitForSingleObject",
        "WaitForSingleObjectEx",
        "WaitForThreadpoolWorkCallbacks",
        "WideCharToMultiByte",
        "WriteConsoleW",
        "WriteFile",
        "lstrcmpiW"
      ]
    },
    {
      "name": "advapi32.dll",
      "imports": 16,
      "functions": [
        "CloseServiceHandle",
        "GetTraceEnableFlags",
        "GetTraceEnableLevel",
        "GetTraceLoggerHandle",
        "OpenSCManagerW",
        "OpenServiceW",
        "QueryServiceConfigW",
        "QueryServiceStatus",
        "RegCloseKey",
        "RegCreateKeyExW",
        "RegOpenKeyExW",
        "RegQueryValueExW",
        "RegSetValueExW",
        "RegisterTraceGuidsW",
        "TraceMessage",
        "UnregisterTraceGuids"
      ]
    },
    {
      "name": "crypt32.dll",
      "imports": 4,
      "functions": [
        "CertFreeCertificateChain",
        "CertFreeCertificateContext",
        "CertGetCertificateChain",
        "CertVerifyCertificateChainPolicy"
      ]
    },
    {
      "name": "wintrust.dll",
      "imports": 3,
      "functions": [
        "WTHelperGetProvSignerFromChain",
        "WTHelperProvDataFromStateData",
        "WinVerifyTrust"
      ]
    },
    {
      "name": "winhttp.dll",
      "imports": 19,
      "functions": [
        "WinHttpAddRequestHeaders",
        "WinHttpCloseHandle",
        "WinHttpConnect",
        "WinHttpCrackUrl",
        "WinHttpGetDefaultProxyConfiguration",
        "WinHttpGetIEProxyConfigForCurrentUser",
        "WinHttpGetProxyForUrl",
        "WinHttpOpen",
        "WinHttpOpenRequest",
        "WinHttpQueryDataAvailable",
        "WinHttpQueryHeaders",
        "WinHttpQueryOption",
        "WinHttpReadData",
        "WinHttpReceiveResponse",
        "WinHttpSendRequest",
        "WinHttpSetOption",
        "WinHttpSetStatusCallback",
        "WinHttpSetTimeouts",
        "WinHttpWriteData"
      ]
    },
    {
      "name": "ole32.dll",
      "imports": 8,
      "functions": [
        "CoCreateGuid",
        "CoCreateInstance",
        "CoInitializeEx",
        "CoSetProxyBlanket",
        "CoUninitialize",
        "CoWaitForMultipleHandles",
        "IIDFromString",
        "StringFromGUID2"
      ]
    },
    {
      "name": "oleaut32.dll",
      "imports": 0,
      "functions": []
    },
    {
      "name": "shlwapi.dll",
      "imports": 1,
      "functions": [
        "PathIsURLW"
      ]
    }
  ],
  "ImageDLLExports": {
    "exports": 66,
    "functions": [
      "MpGearCloseHandle",
      "MpGearContainerAnalyze",
      "MpGearContainerCloseObject",
      "MpGearContainerCommit",
      "MpGearContainerDelete",
      "MpGearContainerFreeObjectInfo",
      "MpGearContainerGetNext",
      "MpGearContainerOpen",
      "MpGearContainerOpenObject",
      "MpGearContainerRead",
      "MpGearContainerRecognize",
      "MpGearContainerSetSize",
      "MpGearContainerWrite",
      "MpGearCreateManager",
      "MpGearDuplicateHandle",
      "MpGearDynamicConfigAddBinary",
      "MpGearDynamicConfigAddBool",
      "MpGearDynamicConfigAddDWORD",
      "MpGearDynamicConfigAddQWORD",
      "MpGearDynamicConfigAddString",
      "MpGearDynamicConfigAddStringList",
      "MpGearDynamicConfigClear",
      "MpGearDynamicConfigSend",
      "MpGearFreeData",
      "MpGearGetManagerInfo",
      "MpGearGetSigDataDWORD",
      "MpGearGetSigUpdateConfig",
      "MpGearGetVirusNames",
      "MpGearInheritEngine",
      "MpGearInitializeMpPLI",
      "MpGearQuarantineDelete",
      "MpGearQuarantineGetNext",
      "MpGearQuarantineOpen",
      "MpGearQuarantineOpenEnumerator",
      "MpGearQuarantineQuery",
      "MpGearQuarantineRecover",
      "MpGearQuarantineRestore",
      "MpGearRebootActions",
      "MpGearRenderPLIData",
      "MpGearScanControl",
      "MpGearScanFull",
      "MpGearScanGetNextActionResult",
      "MpGearScanGetNextThreat",
      "MpGearScanGetStatistics",
      "MpGearScanOpen",
      "MpGearScanOpenActionResultsEnumerator",
      "MpGearScanOpenThreatEnumerator",
      "MpGearScanPath",
      "MpGearScanQuick",
      "MpGearScanSetDefaultThreatActions",
      "MpGearScanSetOption",
      "MpGearScanSetOptionEx",
      "MpGearScanSetThreatAction",
      "MpGearScanStream",
      "MpGearScanSubmitReport",
      "MpGearScanSubmitReportData",
      "MpGearScanTakeActions",
      "MpGearSetEngine",
      "MpGearSetEngineWithResourceSigs",
      "MpGearSetSigUpdateConfig",
      "MpGearSigUpdateCancel",
      "MpGearSigUpdateRollback",
      "MpGearSigUpdateStart",
      "MpGearSubmitHeartbeatReport",
      "MpGearSubmitHeartbeatReportData",
      "MpGearSubmitReportData"
    ]
  },
  "ImageHashSignatures": {
    "sha2": "abbe3285c58c830314f9f0ad2ddc769139c0d808e27893290adc69a535b996b1"
  },
  "scan": {
    "intentions": 11,
    "uniq_apis_matched": 21,
    "results": [
      {
        "intent": "Delete Files From Disk Potentially Erasing Important Evidence To Cover Attack Activity",
        "tag": "Defense Evasion:T1070.004 - File Deletion",
        "component": "Filesystem",
        "inputs": 2,
        "matches": 1,
        "apis": [
          "DeleteFileW"
        ]
      },
      {
        "intent": "Query and Discovery General Attributes From The Target System",
        "tag": "Discovery:T1082 - System Information Discovery",
        "component": "---",
        "inputs": 3,
        "matches": 1,
        "apis": [
          "RtlGetVersion"
        ]
      },
      {
        "intent": "Query And Discover Windows Registry Configuration Settings",
        "tag": "Discovery:T1012 - Query Registry",
        "component": "Registry",
        "inputs": 11,
        "matches": 1,
        "apis": [
          "RegQueryValueExW"
        ]
      },
      {
        "intent": "Enumerate Files or Directories on the Target System",
        "tag": "Discovery:T1083 - File and Directory Discovery",
        "component": "Filesystem",
        "inputs": 5,
        "matches": 2,
        "apis": [
          "FindFirstFileExW",
          "FindFirstFileW"
        ]
      },
      {
        "intent": "Discover Time Configuration Settings On The Target System",
        "tag": "Discovery:T1124 - System Time Discovery",
        "component": "---",
        "inputs": 5,
        "matches": 1,
        "apis": [
          "GetTimeZoneInformation"
        ]
      },
      {
        "intent": "Implements Features To Execute or Spawn New Processes On The Target System",
        "tag": "Expert Input:IBO.0002 - Spawn New Process",
        "component": "Processes",
        "inputs": 7,
        "matches": 1,
        "apis": [
          "CreateProcessw"
        ]
      },
      {
        "intent": "Implements Features To Create/Manipulate The Windows Registry",
        "tag": "Expert Input:IBO.0008 - Create/Manipulate The Windows Registry",
        "component": "Registry",
        "inputs": 33,
        "matches": 3,
        "apis": [
          "RegCreateKeyExW",
          "RegOpenKeyExW",
          "RegSetValueExW"
        ]
      },
      {
        "intent": "Implements Features To Create/Manipulate System Services",
        "tag": "Expert Input:IBO.0007 - Create/Manipulate System Services",
        "component": "Services",
        "inputs": 19,
        "matches": 1,
        "apis": [
          "CloseServiceHandle"
        ]
      },
      {
        "intent": "Implements Features To Enumerate/Discover System Services And Their Configuration Data",
        "tag": "Expert Input:IBO.0006 - Enumerate System Services",
        "component": "Services",
        "inputs": 28,
        "matches": 4,
        "apis": [
          "OpenSCManagerW",
          "OpenServiceW",
          "QueryServiceConfigW",
          "QueryServiceStatus"
        ]
      },
      {
        "intent": "Initiate Network Connections Over HTTP, HTTPS To Download Content On The Target System",
        "tag": "Command And Control:T1105 - Ingress Tool Transfer",
        "component": "Networking",
        "inputs": 21,
        "matches": 4,
        "apis": [
          "WinHttpConnect",
          "WinHttpGetProxyForUrl",
          "WinHttpOpenRequest",
          "WinHttpSendRequest"
        ]
      },
      {
        "intent": "Implements Features To Discover Network Proxy Configuration",
        "tag": "Expert Input:IBO.00015 - Network Layer-7 HTTP",
        "component": "Networking",
        "inputs": 2,
        "matches": 2,
        "apis": [
          "WinHttpGetDefaultProxyConfiguration",
          "WinHttpGetIEProxyConfigForCurrentUser"
        ]
      }
    ]
  }
}